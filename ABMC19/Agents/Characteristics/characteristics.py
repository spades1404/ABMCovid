import random
import numpy
import os

global dataSet
dataSet = "0.010822089	0.011266317	0.011636919	0.012011562	0.012009332	0.012113633	0.012383062	0.012755984	0.01255569	0.012318134	0.012182828	0.012280063	0.011877888	0.011645003	0.011206658	0.011031291	0.010734884	0.010606525	0.010974581	0.011400365	0.011935406	0.012144637	0.012608402	0.012731312	0.012755071	0.01316539	0.013213446	0.01364146	0.013907536	0.013653976	0.013525227	0.013653347	0.013319304	0.013424714	0.013402961	0.013064292	0.01316036	0.013136092	0.01322174	0.01322406	0.012697014	0.011837078	0.01165945	0.011885433	0.012096641	0.0123071	0.012849581	0.013399817	0.01383397	0.013512712	0.013844285	0.013842967	0.014016972	0.01398772	0.014087066	0.013934543	0.013618675	0.01329601	0.012826646	0.012283985	0.011994885	0.01171806	0.011261242	0.010833557	0.010410288	0.010395317	0.010214725	0.009876086	0.00989944	0.010038983	0.010233004	0.010703042	0.0114979	0.008806484	0.008445583	0.008326341	0.007657836	0.00675944	0.005989463	0.006078404	0.005892572	0.005578291	0.005151504	0.004733774	0.00432365	0.003825662	0.003453264	0.003145016	0.002787004	0.00238995	0.009060029"

def bmiDef():
    return random.normalvariate(27.5,7.5)

def ageDef():
    data = dataSet.split("\t")
    return (numpy.random.choice(numpy.arange(0,91), p = data))

def RTF(chance): #Chance is Percent of people that returns True, e.g 60% is 0.6 (RTF = RANDOM TRUE FALSE)
    if random.random() < chance:
        return True
    else:
        return False

#we can add more characteristic checks here (like other pre existing conditions

for i in range(300):
    ageDef()